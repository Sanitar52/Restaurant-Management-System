datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                  Int       @id @default(autoincrement())
  employee            Employee?
  name                String?
  email               String    @unique
  username            String    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  role                Role      @default(CUSTOMER)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  cartMenuItem        CartMenuItem[]
  orders              Order[]
}
enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

model Employee {
  id           Int        @id @default(autoincrement())
  userid       Int        @unique
  restaurantCode Int
  user         User       @relation(fields: [userid], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantCode], references: [restaurantCode])
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  employee        Employee[]
  menuItems   MenuItem[]
  name        String
  body        String
  logo        String
  restaurantCode        Int   @unique

}

enum Category {
  APPETIZER
  PIZZA
  BURGER
  MAIN_COURSE
  VEGETARIAN
  DESSERT
  COLDDRINKS
  HOTDRINKS
}

model MenuItem {
  id Int @id @default(autoincrement())
  restaurantCode  Int
  restaurant Restaurant @relation(fields:[restaurantCode], references: [restaurantCode])
  name String
  logo String
  description String
  category Category @default(MAIN_COURSE)
  quantity  Int
  price Float
  cartMenuItem CartMenuItem[]
}

model CartMenuItem {
  id Int @id @default(autoincrement())
  menuItemId Int
  menuItem MenuItem @relation(fields:[menuItemId], references: [id])
  orderPrice Float?
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields:[userId], references: [id])
  orderId Int?
  order Order? @relation(fields:[orderId], references: [id])
  inCart Boolean @default(true)
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields:[userId], references: [id])
  cartMenuItemIds Int[]
  cartMenuItems CartMenuItem[]
  status OrderStatus @default(PENDING)
  total Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
